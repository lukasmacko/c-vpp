// Code generated by protoc-gen-go.
// source: pod.proto
// DO NOT EDIT!

/*
Package pod is a generated protocol buffer package.

Package pod defines data model for Kubernetes Pod.

It is generated from these files:
	pod.proto

It has these top-level messages:
	Pod
*/
package pod

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// Protocol defines network protocols supported for container ports.
type Pod_Container_Port_Protocol int32

const (
	Pod_Container_Port_TCP Pod_Container_Port_Protocol = 0
	Pod_Container_Port_UDP Pod_Container_Port_Protocol = 1
)

var Pod_Container_Port_Protocol_name = map[int32]string{
	0: "TCP",
	1: "UDP",
}
var Pod_Container_Port_Protocol_value = map[string]int32{
	"TCP": 0,
	"UDP": 1,
}

func (x Pod_Container_Port_Protocol) String() string {
	return proto.EnumName(Pod_Container_Port_Protocol_name, int32(x))
}

// Pod is a collection of containers that can run on a host.
// This resource is created by clients and scheduled onto hosts.
type Pod struct {
	// Name of the pod unique within the namespace.
	// Cannot be updated.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Namespace the pod is inserted into.
	// An empty namespace is equivalent to the "default" namespace, but "default"
	// is the canonical representation.
	// Cannot be updated.
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	// A list of labels attached to this pod.
	// +optional
	Label []*Pod_Label `protobuf:"bytes,3,rep,name=label" json:"label,omitempty"`
	// IP address allocated to the pod. Routable at least within the cluster.
	// Empty if not yet allocated.
	// +optional
	IpAddress string `protobuf:"bytes,5,opt,name=ip_address" json:"ip_address,omitempty"`
	// List of containers belonging to the pod.
	// Containers cannot currently be added or removed.
	// There must be at least one container in a Pod.
	// Cannot be updated.
	Container []*Pod_Container `protobuf:"bytes,4,rep,name=container" json:"container,omitempty"`
}

func (m *Pod) Reset()         { *m = Pod{} }
func (m *Pod) String() string { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()    {}

func (m *Pod) GetLabel() []*Pod_Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Pod) GetContainer() []*Pod_Container {
	if m != nil {
		return m.Container
	}
	return nil
}

// Label is a key/value pair attached to an object (pod in this case).
// Labels are used to organize and to select subsets of objects.
type Pod_Label struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Pod_Label) Reset()         { *m = Pod_Label{} }
func (m *Pod_Label) String() string { return proto.CompactTextString(m) }
func (*Pod_Label) ProtoMessage()    {}

// A single application container run within a pod.
type Pod_Container struct {
	// Name of the container.
	// Each container in a pod has a unique name.
	// Cannot be updated.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// List of ports to expose from the container. Exposing a port here gives
	// the system additional information about the network connections a
	// container uses, but it is primarily informational. Not specifying a port
	// here DOES NOT prevent that port from being exposed. Any port which is
	// listening on the default "0.0.0.0" address inside a container will be
	// accessible from the network.
	// Cannot be updated.
	// +optional
	Port []*Pod_Container_Port `protobuf:"bytes,2,rep,name=port" json:"port,omitempty"`
}

func (m *Pod_Container) Reset()         { *m = Pod_Container{} }
func (m *Pod_Container) String() string { return proto.CompactTextString(m) }
func (*Pod_Container) ProtoMessage()    {}

func (m *Pod_Container) GetPort() []*Pod_Container_Port {
	if m != nil {
		return m.Port
	}
	return nil
}

// Port represents a network port in a single container.
type Pod_Container_Port struct {
	// An IANA_SVC_NAME formatted port name, unique within the pod.
	// The name can be referred to by services, policies, ...
	// +optional
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Port number to expose on the host.
	// The port number is in the range: 0 < x < 65536.
	// If pod is in the host network namespace, this must match container_port.
	// Most containers do not need this.
	// +optional
	HostPort int32 `protobuf:"varint,2,opt,name=host_port" json:"host_port,omitempty"`
	// Port number to expose on the pod's IP address.
	// The port number is in the range: 0 < x < 65536.
	ContainerPort int32 `protobuf:"varint,3,opt,name=container_port" json:"container_port,omitempty"`
	// Protocol for port. Must be UDP or TCP.
	// Defaults to "TCP".
	// +optional
	Protocol Pod_Container_Port_Protocol `protobuf:"varint,4,opt,name=protocol,enum=pod.Pod_Container_Port_Protocol" json:"protocol,omitempty"`
	// What host IP to bind the external port to.
	// +optional
	HostIpAddress string `protobuf:"bytes,5,opt,name=host_ip_address" json:"host_ip_address,omitempty"`
}

func (m *Pod_Container_Port) Reset()         { *m = Pod_Container_Port{} }
func (m *Pod_Container_Port) String() string { return proto.CompactTextString(m) }
func (*Pod_Container_Port) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("pod.Pod_Container_Port_Protocol", Pod_Container_Port_Protocol_name, Pod_Container_Port_Protocol_value)
}
