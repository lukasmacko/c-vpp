// Code generated by protoc-gen-go.
// source: policy.proto
// DO NOT EDIT!

/*
Package policy is a generated protocol buffer package.

Package policy defines data model for Kubernetes Network Policy.

It is generated from these files:
	policy.proto

It has these top-level messages:
	Policy
*/
package policy

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// Operator represents a key's relationship to a set of values.
type Policy_LabelSelector_LabelExpression_Operator int32

const (
	Policy_LabelSelector_LabelExpression_IN             Policy_LabelSelector_LabelExpression_Operator = 0
	Policy_LabelSelector_LabelExpression_NOT_IN         Policy_LabelSelector_LabelExpression_Operator = 1
	Policy_LabelSelector_LabelExpression_EXISTS         Policy_LabelSelector_LabelExpression_Operator = 2
	Policy_LabelSelector_LabelExpression_DOES_NOT_EXIST Policy_LabelSelector_LabelExpression_Operator = 3
)

var Policy_LabelSelector_LabelExpression_Operator_name = map[int32]string{
	0: "IN",
	1: "NOT_IN",
	2: "EXISTS",
	3: "DOES_NOT_EXIST",
}
var Policy_LabelSelector_LabelExpression_Operator_value = map[string]int32{
	"IN":             0,
	"NOT_IN":         1,
	"EXISTS":         2,
	"DOES_NOT_EXIST": 3,
}

func (x Policy_LabelSelector_LabelExpression_Operator) String() string {
	return proto.EnumName(Policy_LabelSelector_LabelExpression_Operator_name, int32(x))
}

// The protocol (TCP or UDP) which traffic must match.
// If not specified, this field defaults to TCP.
// +optional
type Policy_IngressRule_Port_Protocol int32

const (
	Policy_IngressRule_Port_TCP Policy_IngressRule_Port_Protocol = 0
	Policy_IngressRule_Port_UDP Policy_IngressRule_Port_Protocol = 1
)

var Policy_IngressRule_Port_Protocol_name = map[int32]string{
	0: "TCP",
	1: "UDP",
}
var Policy_IngressRule_Port_Protocol_value = map[string]int32{
	"TCP": 0,
	"UDP": 1,
}

func (x Policy_IngressRule_Port_Protocol) String() string {
	return proto.EnumName(Policy_IngressRule_Port_Protocol_name, int32(x))
}

type Policy_IngressRule_Port_PortNameOrNumber_Type int32

const (
	Policy_IngressRule_Port_PortNameOrNumber_NUMBER Policy_IngressRule_Port_PortNameOrNumber_Type = 0
	Policy_IngressRule_Port_PortNameOrNumber_NAME   Policy_IngressRule_Port_PortNameOrNumber_Type = 1
)

var Policy_IngressRule_Port_PortNameOrNumber_Type_name = map[int32]string{
	0: "NUMBER",
	1: "NAME",
}
var Policy_IngressRule_Port_PortNameOrNumber_Type_value = map[string]int32{
	"NUMBER": 0,
	"NAME":   1,
}

func (x Policy_IngressRule_Port_PortNameOrNumber_Type) String() string {
	return proto.EnumName(Policy_IngressRule_Port_PortNameOrNumber_Type_name, int32(x))
}

// Policy describes what network traffic is allowed for a set of Pods.
type Policy struct {
	// Name of the policy unique within the namespace.
	// Cannot be updated.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Namespace the policy is inserted into.
	// An empty namespace is equivalent to the "default" namespace, but "default"
	// is the canonical representation used in the key for a key-value store.
	// Cannot be updated.
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	// A list of labels attached to this policy.
	// +optional
	Label []*Policy_Label `protobuf:"bytes,3,rep,name=label" json:"label,omitempty"`
	// Pods to which this policy applies. The array of ingress rules is applied
	// to all pods selected by this field. Multiple network policies can select
	// the same set of pods. In such case, the ingress rules for each are combined
	// additively.
	// This field is NOT optional and follows standard label selector semantics.
	// An empty selector matches all pods in this namespace.
	Pods *Policy_LabelSelector `protobuf:"bytes,4,opt,name=pods" json:"pods,omitempty"`
	// List of ingress rules applied to the selected pods.
	// Traffic is allowed to a pod if there are no network policies selecting the pod
	// OR if the traffic source is the pod's local node,
	// OR if the traffic matches at least one ingress rule across all of the network
	// policies applied to the pod.
	// If there are no ingress rules then this network policy does not allow
	// any traffic (and serves solely to ensure that the selected pods are isolated
	// by default).
	// +optional
	IngressRule []*Policy_IngressRule `protobuf:"bytes,5,rep,name=ingress_rule" json:"ingress_rule,omitempty"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}

func (m *Policy) GetLabel() []*Policy_Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Policy) GetPods() *Policy_LabelSelector {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (m *Policy) GetIngressRule() []*Policy_IngressRule {
	if m != nil {
		return m.IngressRule
	}
	return nil
}

// Label is a key/value pair attached to an object (namespace in this case).
// Labels are used to organize and to select subsets of objects.
type Policy_Label struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Policy_Label) Reset()         { *m = Policy_Label{} }
func (m *Policy_Label) String() string { return proto.CompactTextString(m) }
func (*Policy_Label) ProtoMessage()    {}

// A label selector is a label query over a set of resources.
// The result of match_label-s and match_expression-s are ANDed.
// An empty label selector matches all objects. A null label selector matches
// no objects.
type Policy_LabelSelector struct {
	// A list of labels that a resource needs to have attached in order to get
	// selected.
	// +optional
	MatchLabel []*Policy_Label `protobuf:"bytes,1,rep,name=match_label" json:"match_label,omitempty"`
	// A list of key-value expressions applied to labels.
	// For a given resource and its labels, all expressions must evaluate
	// to TRUE for the resource to get selected.
	MatchExpression []*Policy_LabelSelector_LabelExpression `protobuf:"bytes,2,rep,name=match_expression" json:"match_expression,omitempty"`
}

func (m *Policy_LabelSelector) Reset()         { *m = Policy_LabelSelector{} }
func (m *Policy_LabelSelector) String() string { return proto.CompactTextString(m) }
func (*Policy_LabelSelector) ProtoMessage()    {}

func (m *Policy_LabelSelector) GetMatchLabel() []*Policy_Label {
	if m != nil {
		return m.MatchLabel
	}
	return nil
}

func (m *Policy_LabelSelector) GetMatchExpression() []*Policy_LabelSelector_LabelExpression {
	if m != nil {
		return m.MatchExpression
	}
	return nil
}

// An expression that contains values, a label key, and an operator that
// relates the key and values.
type Policy_LabelSelector_LabelExpression struct {
	// Key is the label key that the expression applies to.
	Key      string                                        `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Operator Policy_LabelSelector_LabelExpression_Operator `protobuf:"varint,2,opt,name=operator,enum=policy.Policy_LabelSelector_LabelExpression_Operator" json:"operator,omitempty"`
	// An array of string values.
	// If the operator is IN or NOT_IN, the values array must be non-empty.
	// If the operator is EXISTS or DOES_NOT_EXIST, the values array
	// must be empty.
	// +optional
	Value []string `protobuf:"bytes,3,rep,name=value" json:"value,omitempty"`
}

func (m *Policy_LabelSelector_LabelExpression) Reset()         { *m = Policy_LabelSelector_LabelExpression{} }
func (m *Policy_LabelSelector_LabelExpression) String() string { return proto.CompactTextString(m) }
func (*Policy_LabelSelector_LabelExpression) ProtoMessage()    {}

// Ingress rule matches traffic if and only if the traffic matches both port-s
// AND from.
type Policy_IngressRule struct {
	// List of ports made accessible on the pods selected for this policy.
	// Each item in this list is combined using a logical OR.
	// If the array is empty or null, then this ingress rule matches all ports
	// (traffic not restricted by port).
	// If the array is non-empty, then this ingress rule allows traffic
	// only if the traffic matches at least one port in the list.
	// +optional
	Port []*Policy_IngressRule_Port `protobuf:"bytes,1,rep,name=port" json:"port,omitempty"`
	// List of sources which are able to access the pods selected for this
	// policy.
	// Items in this list are combined using a logical OR operation.
	// If the array is empty or null, then this ingress rule matches all sources
	// (traffic not restricted by source).
	// If the array is non-empty, then this ingress rule allows traffic only
	// if the traffic matches at least one item in the from list.
	// +optional
	From []*Policy_IngressRule_Peer `protobuf:"bytes,2,rep,name=from" json:"from,omitempty"`
}

func (m *Policy_IngressRule) Reset()         { *m = Policy_IngressRule{} }
func (m *Policy_IngressRule) String() string { return proto.CompactTextString(m) }
func (*Policy_IngressRule) ProtoMessage()    {}

func (m *Policy_IngressRule) GetPort() []*Policy_IngressRule_Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *Policy_IngressRule) GetFrom() []*Policy_IngressRule_Peer {
	if m != nil {
		return m.From
	}
	return nil
}

// A port selector.
type Policy_IngressRule_Port struct {
	Protocol Policy_IngressRule_Port_Protocol `protobuf:"varint,3,opt,name=protocol,enum=policy.Policy_IngressRule_Port_Protocol" json:"protocol,omitempty"`
	// If specified, the port on the given protocol.
	// This can either be a numerical or named port on a pod.
	// If this field is not provided, the rule matches all port names and
	// numbers.
	// If present, only traffic on the specified protocol AND port
	// will be matched.
	// +optional
	Port *Policy_IngressRule_Port_PortNameOrNumber `protobuf:"bytes,1,opt,name=port" json:"port,omitempty"`
}

func (m *Policy_IngressRule_Port) Reset()         { *m = Policy_IngressRule_Port{} }
func (m *Policy_IngressRule_Port) String() string { return proto.CompactTextString(m) }
func (*Policy_IngressRule_Port) ProtoMessage()    {}

func (m *Policy_IngressRule_Port) GetPort() *Policy_IngressRule_Port_PortNameOrNumber {
	if m != nil {
		return m.Port
	}
	return nil
}

// Numerical or named port.
type Policy_IngressRule_Port_PortNameOrNumber struct {
	// Port number from the range: 0 < x < 65536.
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	// Port name as defined by containers in the pod.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Policy_IngressRule_Port_PortNameOrNumber) Reset() {
	*m = Policy_IngressRule_Port_PortNameOrNumber{}
}
func (m *Policy_IngressRule_Port_PortNameOrNumber) String() string { return proto.CompactTextString(m) }
func (*Policy_IngressRule_Port_PortNameOrNumber) ProtoMessage()    {}

// A selector for a set of pods / namespaces.
type Policy_IngressRule_Peer struct {
	// This is a label selector which selects Pods in this namespace.
	// If present but empty, this selector selects all pods in this namespace.
	// +optional
	Pods *Policy_LabelSelector `protobuf:"bytes,1,opt,name=pods" json:"pods,omitempty"`
	// Selects namespaces using cluster scoped-labels.
	// This matches all pods in all namespaces selected by this label selector.
	// If present but empty, this selector selects all namespaces.
	// +optional
	Namespaces *Policy_LabelSelector `protobuf:"bytes,2,opt,name=namespaces" json:"namespaces,omitempty"`
}

func (m *Policy_IngressRule_Peer) Reset()         { *m = Policy_IngressRule_Peer{} }
func (m *Policy_IngressRule_Peer) String() string { return proto.CompactTextString(m) }
func (*Policy_IngressRule_Peer) ProtoMessage()    {}

func (m *Policy_IngressRule_Peer) GetPods() *Policy_LabelSelector {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (m *Policy_IngressRule_Peer) GetNamespaces() *Policy_LabelSelector {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func init() {
	proto.RegisterEnum("policy.Policy_LabelSelector_LabelExpression_Operator", Policy_LabelSelector_LabelExpression_Operator_name, Policy_LabelSelector_LabelExpression_Operator_value)
	proto.RegisterEnum("policy.Policy_IngressRule_Port_Protocol", Policy_IngressRule_Port_Protocol_name, Policy_IngressRule_Port_Protocol_value)
	proto.RegisterEnum("policy.Policy_IngressRule_Port_PortNameOrNumber_Type", Policy_IngressRule_Port_PortNameOrNumber_Type_name, Policy_IngressRule_Port_PortNameOrNumber_Type_value)
}
